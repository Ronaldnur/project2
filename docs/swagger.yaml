definitions:
  dto.CommentResponse:
    properties:
      data:
        $ref: '#/definitions/dto.MakeDataComment'
      message:
        type: string
      result:
        type: string
      statusCode:
        type: integer
    type: object
  dto.DeleteCommentResponse:
    properties:
      message:
        type: string
      statusCode:
        type: integer
    type: object
  dto.DeletePhotoResponse:
    properties:
      message:
        type: string
      statusCode:
        type: integer
    type: object
  dto.DeleteResponse:
    properties:
      message:
        type: string
      statusCode:
        type: integer
    type: object
  dto.DeleteResponseSocialMedia:
    properties:
      message:
        type: string
      statusCode:
        type: integer
    type: object
  dto.GetCommentsRequest:
    properties:
      Photo:
        $ref: '#/definitions/dto.GetPhotoForComment'
      User:
        $ref: '#/definitions/dto.GetUserForComment'
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      photo_id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  dto.GetCommentsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.GetCommentsRequest'
        type: array
      message:
        type: string
      result:
        type: string
      statusCode:
        type: integer
    type: object
  dto.GetPhotoForComment:
    properties:
      caption:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      user_id:
        type: integer
    type: object
  dto.GetPhotoResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.NewGetPhotoRequest'
        type: array
      message:
        type: string
      result:
        type: string
      statusCode:
        type: integer
    type: object
  dto.GetSocialMedia:
    properties:
      User:
        $ref: '#/definitions/dto.GetUserForSocialMedia'
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  dto.GetSocialMediaResponse:
    properties:
      message:
        type: string
      result:
        type: string
      social_medias:
        items:
          $ref: '#/definitions/dto.GetSocialMedia'
        type: array
      statusCode:
        type: integer
    type: object
  dto.GetUser:
    properties:
      email:
        type: string
      username:
        type: string
    type: object
  dto.GetUserForComment:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  dto.GetUserForSocialMedia:
    properties:
      id:
        type: integer
      username:
        type: string
    type: object
  dto.LoginResponse:
    properties:
      message:
        type: string
      result:
        type: string
      statusCode:
        type: integer
      token:
        $ref: '#/definitions/dto.TokenResponse'
    type: object
  dto.MakeCommentUpdate:
    properties:
      message:
        type: string
    type: object
  dto.MakeDataComment:
    properties:
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      photo_id:
        type: integer
      user_id:
        type: integer
    type: object
  dto.MakeDataPhoto:
    properties:
      caption:
        type: string
      created_at:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      user_id:
        type: integer
    type: object
  dto.MakeUpdatePhoto:
    properties:
      caption:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  dto.MakeUserUpdate:
    properties:
      age:
        type: integer
      email:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  dto.NewCommentRequest:
    properties:
      message:
        type: string
      photo_id:
        type: integer
    type: object
  dto.NewGetPhotoRequest:
    properties:
      User:
        $ref: '#/definitions/dto.GetUser'
      caption:
        type: string
      created_at:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  dto.NewPhotoRequest:
    properties:
      caption:
        type: string
      photo_url:
        type: string
      title:
        type: string
    type: object
  dto.NewPhotoResponse:
    properties:
      data:
        $ref: '#/definitions/dto.MakeDataPhoto'
      message:
        type: string
      result:
        type: string
      statusCode:
        type: integer
    type: object
  dto.NewSocialMediaRequest:
    properties:
      name:
        type: string
      social_media_url:
        type: string
    type: object
  dto.NewUpdateResponse:
    properties:
      data:
        $ref: '#/definitions/dto.MakeUpdatePhoto'
      message:
        type: string
      result:
        type: string
      statusCode:
        type: integer
    type: object
  dto.NewUserLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.NewUserRequest:
    properties:
      age:
        type: integer
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dto.NewUserResponse:
    properties:
      data:
        $ref: '#/definitions/dto.UserDataResponse'
      message:
        type: string
      result:
        type: string
      statusCode:
        type: integer
    type: object
  dto.NewUserUpdate:
    properties:
      email:
        type: string
      username:
        type: string
    type: object
  dto.SocialMediaResponse:
    properties:
      data:
        $ref: '#/definitions/dto.SocialMediaReturn'
      message:
        type: string
      result:
        type: string
      statusCode:
        type: integer
    type: object
  dto.SocialMediaReturn:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      user_id:
        type: integer
    type: object
  dto.TokenResponse:
    properties:
      token:
        type: string
    type: object
  dto.UpdateComment:
    properties:
      id:
        type: integer
      message:
        type: string
      photo_id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  dto.UpdateResponse:
    properties:
      data:
        $ref: '#/definitions/dto.UpdateComment'
      message:
        type: string
      result:
        type: string
      statusCode:
        type: integer
    type: object
  dto.UpdateSocialMediaResponse:
    properties:
      data:
        $ref: '#/definitions/dto.UpdateSocialMediaReturn'
      message:
        type: string
      result:
        type: string
      statusCode:
        type: integer
    type: object
  dto.UpdateSocialMediaReturn:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      user_id:
        type: integer
    type: object
  dto.UserDataResponse:
    properties:
      age:
        type: integer
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  dto.UserUpdateResponse:
    properties:
      data:
        $ref: '#/definitions/dto.MakeUserUpdate'
      message:
        type: string
      result:
        type: string
      statusCode:
        type: integer
    type: object
info:
  contact: {}
paths:
  /comments:
    get:
      consumes:
      - application/json
      description: Get comments made by the authenticated user
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetCommentsResponse'
      summary: Get comments of the authenticated user
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: Make a new comment with the provided details
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Comment create request
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CommentResponse'
      summary: Make a new comment
      tags:
      - comments
  /comments/{commentId}:
    delete:
      description: Delete a comment user
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted
          schema:
            $ref: '#/definitions/dto.DeleteCommentResponse'
      summary: Delete a comment
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Update the details the user's comment
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      - description: Comment update request
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.MakeCommentUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateResponse'
      summary: Update comment details
      tags:
      - comments
  /photos:
    get:
      description: Get photos uploaded by the authenticated user
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetPhotoResponse'
      summary: Get photos of the authenticated user
      tags:
      - photos
    post:
      description: Post a new photo
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Photo posting request
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewPhotoRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.NewPhotoResponse'
      summary: Posting a new photo
      tags:
      - photos
  /photos/{photoId}:
    delete:
      description: Delete a photo uploaded by the authenticated user
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Photo ID
        in: path
        name: photoId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted
          schema:
            $ref: '#/definitions/dto.DeletePhotoResponse'
      summary: Delete a photo
      tags:
      - photos
    put:
      consumes:
      - application/json
      description: Update the details of the authenticated user's photo
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Photo ID
        in: path
        name: photoId
        required: true
        type: integer
      - description: Photo update request
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewPhotoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NewUpdateResponse'
      summary: Update photo details
      tags:
      - photos
  /socialmedias:
    get:
      description: Get social media posted by the user
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetSocialMediaResponse'
      summary: Get social media from the user
      tags:
      - socialMedia
    post:
      consumes:
      - application/json
      description: Post a new social media
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Social media create request
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewSocialMediaRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SocialMediaResponse'
      summary: Post a new social media
      tags:
      - socialMedia
  /socialmedias/{socialMediaId}:
    delete:
      description: Delete a social media posted by the user
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Social Media ID
        in: path
        name: socialMediaId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DeleteResponseSocialMedia'
      summary: Delete a social media
      tags:
      - socialMedia
    put:
      consumes:
      - application/json
      description: Update the details of the authenticated user's social media
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Social Media ID
        in: path
        name: socialMediaId
        required: true
        type: integer
      - description: Social media update request
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewSocialMediaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateSocialMediaResponse'
      summary: Update social media details
      tags:
      - socialMedia
  /users:
    delete:
      description: Delete the account of the authenticated user
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted
          schema:
            $ref: '#/definitions/dto.DeleteResponse'
      summary: Delete the authenticated user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the details of the authenticated user
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User update request
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewUserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserUpdateResponse'
      summary: Update user details
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Log in a user with the provided credentials
      parameters:
      - description: User login request
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewUserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
      summary: Log in a user
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided details
      parameters:
      - description: User registration request
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.NewUserResponse'
      summary: Register a new user
      tags:
      - users
swagger: "2.0"
